local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")

local fireRate = 0.3 -- Set a fire rate to avoid excessive requests
local isShooting = false
local autoShootEnabled = false
local isReloading = false

local lastShotTime = 0
local ammoListener = nil -- Cache the ammo listener to disconnect it later

-- Function to handle the shooting process
local function autoShoot(tool)
    if not tool or not tool.Parent == character then return end

    -- While shooting is enabled and ammo is available, shoot the tool
    while isShooting and tool:FindFirstChild("Ammo") and tool.Ammo.Value > 0 do
        if (tick() - lastShotTime) >= fireRate then
            lastShotTime = tick() -- Record the time of the last shot
            tool:Activate() -- Trigger the shooting action
        end
        task.wait(fireRate) -- Throttle the shooting
    end
end

-- Function to start shooting when a tool (gun) is equipped
local function startShooting(tool)
    if not isShooting and tool:FindFirstChild("Ammo") and tool.Ammo.Value > 0 then
        isShooting = true
        autoShoot(tool) -- Start the shooting loop
    end
end

-- Function to stop shooting
local function stopShooting()
    isShooting = false
end

-- Function to handle reloading process and ammo management
local function handleReload(tool)
    local ammo = tool:FindFirstChild("Ammo")
    if not ammo then return end

    -- Disconnect any previous ammo listeners to avoid duplicate connections
    if ammoListener then
        ammoListener:Disconnect()
    end

    -- Listen for ammo changes to handle reloading
    ammoListener = ammo:GetPropertyChangedSignal("Value"):Connect(function()
        if ammo.Value == 0 and not isReloading then
            isReloading = true
            stopShooting() -- Stop shooting when ammo reaches 0

            -- Simulate reload time (adjust timing to match actual reload speed)
            task.wait(2) -- Simulate a reload wait (adjust based on actual reload time)
            isReloading = false

            -- Resume auto-shooting if auto-shoot is enabled and ammo is available after reload
            if autoShootEnabled and ammo.Value > 0 then
                startShooting(tool)
            end
        end
    end)
end

-- Function to handle when the player equips a tool
local function onToolEquipped(tool)
    handleReload(tool)
    if autoShootEnabled then
        startShooting(tool)
    end
end

-- Detect when a tool is equipped by the player
character.ChildAdded:Connect(function(child)
    if child:IsA("Tool") then
        onToolEquipped(child)
    end
end)

-- Handle player respawning
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter -- Update character reference after respawn
    newCharacter.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then
            onToolEquipped(child)
        end
    end)
end)

-- Debounce variable for toggling auto-shoot
local toggleDebounce = false

-- Keybind to toggle auto-shoot on/off
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent or toggleDebounce then return end

    if input.KeyCode == Enum.KeyCode.K then
        toggleDebounce = true

        -- Toggle auto-shoot on or off
        autoShootEnabled = not autoShootEnabled
        if not autoShootEnabled then
            stopShooting() -- Stop shooting if toggled off
        else
            -- If a tool is already equipped, start auto-shooting
            local equippedTool = character:FindFirstChildWhichIsA("Tool")
            if equippedTool then
                startShooting(equippedTool)
            end
        end

        -- Debounce delay (optional)
        task.wait(0.5) -- Add a small delay to prevent quick toggling
        toggleDebounce = false
    end
end)
